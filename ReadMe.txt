/////Some comments on the solution:

LuxoftTests.sln solution contains two projects AJAXTests and AmazoneTests corresponding the given tasks.
Solutions represent class libraries with automated tests written in CSharp with .NET Framework 4.6.1.

1. AJAXTests project contains two suits of tests divided in two classes:
	AJAXReqestTests - Test suite with tests verifying all given responses Status Codes.
	AJAXSubjectTests - Test suite with tests verifying some parts of responses bodies. Not all possible cases are covered. Just some verifications of response JSON bodies are made to show how can it be done.
	
	Packages used for this solution are:
	RestSharp - Simple REST and HTTP API Client for .NET
    Newtonsoft.Json	- Json.NET is a popular high-performance JSON framework for .NET. Used for response subject tests.
	
	and standard couple of packages for developing tests in VS:
	MSTest.TestAdapter	
    MSTest.TestFramework
    NUnit
    NUnit.Engine.Api 
    NUnit3TestAdapter	

	The AJAXtests test execution reports are in TestReports directory. Two versions of report were done in two manners:
	1st - more simple report produced by Visual Studio Test Explorer is in TXT file.
	2nd - more informative report is in HTML file.
		HTML file was created using open source tool Trxer (the tool's source and exe are placed in "trxer-master" directory). 
		It converts .trx report file to .html format report. .trx report file is generated by VSTest.Console.exe (the command-line tool to run tests).
		VSTest.Console.exe is a part of Visual Studio. It can be run from command line this way:
		
		vstest.console.exe "path/to/test.dll" /logger:trx 
		
		it takes the .dll file with automated tests. With help of second parameter /logger:trx the .trx report will be generated
	Unfortunately in trx file (wich is xml like structured) testcases are not sorted by name, but in some different manner, so in HTML file tests also are not sorted by name. I had no time to resolve it.
	
2. AmazoneTest project contains one Tests that runs the scenario described in the task and finally asserts the titles of the product.
	Selenium.WebDriver and Selenium.WebDriver.ChromeDriver packages were used for the solution.
	Amazone.com web site was modified, so the All Departments object is not placed as it is given in the task.
	Also, the first item found was < 1 quantity left and quantity select field was not present, so I allowed myself to adopt the conditions of task: if items quantity < 4, we add to cart only 1 item.
	